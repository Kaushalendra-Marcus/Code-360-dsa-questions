Problem statement
Given an array/list of length ‘n’, where the array/list represents the boards and each element of the given array/list represents the length of each board. Some ‘k’ numbers of painters are available to paint these boards. Consider that each unit of a board takes 1 unit of time to paint.
You are supposed to return the area of the minimum time to get this job done of painting all the ‘n’ boards under a constraint that any painter will only paint the continuous sections of boards.

// Link: [problem link](https://www.naukri.com/code360/problems/painter-s-partition-problem_1089557?interviewProblemRedirection=true&attempt_status=COMPLETED)
//Code:
bool isPossible(vector<int> &boards , int k, int n, int mid){
    int paintercount = 1;
    int wallsize = 0;
    for(int i=0;i< n;i++){
        if(wallsize + boards[i]<=mid){
            wallsize += boards[i];
        }
        else{
            paintercount ++;
            if(paintercount > k || boards[i]>mid){
                return  false;
            }
            wallsize=boards[i];
        }
    }
    return true;
} 

int findLargestMinDistance(vector<int> &boards, int k)
{
    int ans= -1;
    int s=0;
    int sum =0;
    int n = boards.size();
    for(int i =0;i<n;i++){
        sum+=boards[i];
    }
    int e = sum;
    int mid = s + (e-s)/2;
    while(s<=e){
        if(isPossible(boards, k, n, mid)){
            ans = mid;
            e = mid-1;
        }
        else{
            s = mid + 1;
        }
        mid = s + (e-s)/2;
    }
    
    return ans;
}

